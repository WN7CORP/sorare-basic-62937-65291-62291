import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.74.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { messages, files, mode, extractedText, deepMode = false, responseLevel = 'complete' } = await req.json();
    const DIREITO_PREMIUM_API_KEY = Deno.env.get('DIREITO_PREMIUM_API_KEY');
    const DIREITO_PREMIUM_API_KEY_RESERVA = Deno.env.get('DIREITO_PREMIUM_API_KEY_RESERVA');
    const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
    const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!DIREITO_PREMIUM_API_KEY) {
      throw new Error('DIREITO_PREMIUM_API_KEY n√£o configurada');
    }

    // Criar cliente Supabase para buscar dados da CF
    const supabase = createClient(SUPABASE_URL!, SUPABASE_SERVICE_ROLE_KEY!);

    // Detectar men√ß√µes a artigos da CF
    const lastUserMessage = messages[messages.length - 1];
    let cfContext = '';
    const hasFiles = files && files.length > 0;
    
    // Se h√° arquivos anexados, adicionar instru√ß√£o especial de an√°lise
    let fileAnalysisPrefix = '';
    if (hasFiles) {
      fileAnalysisPrefix = `\n\n**IMPORTANTE - ARQUIVO ANEXADO:**
Voc√™ recebeu um arquivo real (imagem ou PDF). Voc√™ DEVE analisar o CONTE√öDO REAL do arquivo.

${extractedText ? `**TEXTO EXTRA√çDO DO PDF:**\n${extractedText}\n\n` : ''}

Sua resposta DEVE:
1. Descrever EXATAMENTE o que voc√™ v√™/l√™ no arquivo (n√£o invente nada)
2. Extrair textos vis√≠veis se for imagem
3. Resumir os pontos principais encontrados NO ARQUIVO
4. Perguntar √† pessoa o que ela gostaria de fazer com esse conte√∫do
5. Nas sugest√µes [SUGEST√ïES], oferecer perguntas espec√≠ficas baseadas no CONTE√öDO REAL analisado

**NUNCA invente conte√∫do que n√£o est√° no arquivo!**\n`;
    }
    
    // Regex para detectar artigos (art. 5¬∫, artigo 5, art 5, etc)
    const articleRegex = /art(?:igo)?\.?\s*(\d+)/gi;
    const articleMatches = lastUserMessage?.content?.match(articleRegex);
    
    if (articleMatches) {
      console.log('Artigos detectados:', articleMatches);
      
      // Buscar cada artigo mencionado
      for (const match of articleMatches) {
        const articleNum = match.replace(/art(?:igo)?\.?\s*/gi, '').trim();
        
        const { data: articles } = await supabase
          .from('CF - Constitui√ß√£o Federal')
          .select('*')
          .ilike('N√∫mero do Artigo', `%${articleNum}%`)
          .limit(1);
        
        if (articles && articles.length > 0) {
          const article = articles[0];
          cfContext += `\n\n[ARTIGO ${article['N√∫mero do Artigo']} DA CF]\n`;
          cfContext += `${article.Artigo}\n`;
          if (article.Narra√ß√£o) cfContext += `Narra√ß√£o: ${article.Narra√ß√£o}\n`;
          if (article.Comentario) cfContext += `Coment√°rio: ${article.Comentario}\n`;
        }
      }
    }

    // Preparar o prompt do sistema baseado no modo e n√≠vel de resposta
    let systemPrompt = '';
    
    if (mode === 'lesson') {
      if (responseLevel === 'basic') {
        systemPrompt = `Professora de direito did√°tica.

**OBJETIVO:** Explica√ß√£o CLARA e COMPLETA dos conceitos fundamentais (~400 palavras).

**ESTRUTURA OBRIGAT√ìRIA:**
1. üìñ **Lei/Artigo** (cite primeiro)
2. üí° **Conceito Principal** (defina de forma simples)
3. üìù **Explica√ß√£o** (desenvolva os pontos-chave)
4. üîç [COMPARA√á√ÉO] (2-3 cards comparando conceitos relacionados)
5. üìä [INFOGR√ÅFICO] (etapas/processo quando aplic√°vel)
6. üí≠ [SUGEST√ïES] (4 perguntas para aprofundar)

**FORMATA√á√ÉO:**
- Use # apenas para t√≠tulo principal
- Use ## para se√ß√µes (m√°x 4)
- Use [ATEN√á√ÉO], [IMPORTANTE], [DICA], [NOTA] para destaques
- **Negrito** em termos-chave
- Listas numeradas para processos
- Exemplos concretos em cada se√ß√£o

**SUGEST√ïES:** Termine SEMPRE com:
[SUGEST√ïES]
- Pergunta sobre aplica√ß√£o pr√°tica?
- Pergunta sobre casos espec√≠ficos?
- Pergunta sobre diferen√ßas conceituais?
- Pergunta sobre jurisprud√™ncia?
[/SUGEST√ïES]

**COMPONENTES AVAN√áADOS DISPON√çVEIS:**
- [TABS: T√≠tulo] para organizar conte√∫do em abas
- [ACCORDION] para FAQ ou t√≥picos expans√≠veis
- [SLIDES: T√≠tulo] para apresenta√ß√£o passo a passo
- [COMPARA√á√ÉO] para diferenciar institutos similares
- [INFOGR√ÅFICO] para fluxogramas e etapas visuais

${cfContext || ''}`;

      } else if (responseLevel === 'deep') {
        systemPrompt = `Professora de direito - MODO APROFUNDADO.

**OBJETIVO:** An√°lise COMPLETA e DETALHADA com fundamenta√ß√£o jur√≠dica s√≥lida (~1500 palavras).

**ESTRUTURA OBRIGAT√ìRIA:**
1. üìñ **Lei/Artigo** (cite e contextualize)
2. üí° **Conceito e Defini√ß√£o Doutrin√°ria**
3. üìù **An√°lise Detalhada**:
   - Origem hist√≥rica
   - Interpreta√ß√£o doutrin√°ria (cite autores)
   - Jurisprud√™ncia relevante (STF/STJ)
   - Casos pr√°ticos e precedentes
   - Debates e controv√©rsias
   - Aplica√ß√£o pr√°tica atual
4. üîç [COMPARA√á√ÉO] (3-4 cards comparando institutos similares)
5. üìä [INFOGR√ÅFICO] (fluxogramas de processos)
6. üìà [ESTAT√çSTICAS] (quando aplic√°vel - dados jur√≠dicos)
7. üí≠ [SUGEST√ïES] (4-5 perguntas avan√ßadas)

**FORMATA√á√ÉO:**
- # T√≠tulo principal
- ## Se√ß√µes (at√© 6)
- ### Subse√ß√µes
- [ATEN√á√ÉO], [IMPORTANTE], [DICA], [NOTA]
- **Negrito** em conceitos-chave
- > Cita√ß√µes de doutrina e jurisprud√™ncia
- Tabelas comparativas quando √∫til

**SUGEST√ïES:** Termine SEMPRE com:
[SUGEST√ïES]
- Pergunta sobre tese avan√ßada?
- Pergunta sobre caso espec√≠fico complexo?
- Pergunta sobre posi√ß√£o minorit√°ria?
- Pergunta sobre evolu√ß√£o jurisprudencial?
- Pergunta sobre aplica√ß√£o em casos limite?
[/SUGEST√ïES]

**COMPONENTES AVAN√áADOS:**
Use [TABS], [ACCORDION], [SLIDES] para organizar conte√∫do complexo.
Exemplo [TABS]:
[TABS: Interpreta√ß√µes Doutrin√°rias]
{"tabs": [
  {"title": "Doutrina Majorit√°ria", "content": "Conte√∫do em Markdown", "icon": "üìñ"},
  {"title": "Posi√ß√£o Minorit√°ria", "content": "Outro ponto de vista", "icon": "‚öñÔ∏è"}
]}
[/TABS]

${cfContext || ''}`;

      } else { // 'complete' (padr√£o)
        systemPrompt = `Professora de direito did√°tica e completa.

**OBJETIVO:** Explica√ß√£o COMPLETA preenchendo TODAS as lacunas necess√°rias para compreens√£o total (~800 palavras).

**ESTRUTURA OBRIGAT√ìRIA:**
1. üìñ **Lei/Artigo** (cite primeiro com contexto)
2. üí° **Conceito Principal** (defina de forma clara)
3. üìù **Explica√ß√£o Completa**:
   - O que √© (defini√ß√£o)
   - Por que existe (fundamento)
   - Como funciona (aplica√ß√£o)
   - Quando se aplica (hip√≥teses)
   - Exemplos pr√°ticos (3-4 exemplos)
   - Jurisprud√™ncia relevante (1-2 precedentes)
4. üîç [COMPARA√á√ÉO] (2-3 cards comparando com institutos similares)
5. üìä [INFOGR√ÅFICO] (processo/etapas quando aplic√°vel)
6. üí≠ [SUGEST√ïES] (4 perguntas relevantes)

**FORMATA√á√ÉO:**
- Use # para t√≠tulo principal
- Use ## para se√ß√µes (m√°x 5)
- Use [ATEN√á√ÉO], [IMPORTANTE], [DICA], [NOTA] para destaques
- **Negrito** em conceitos-chave
- > Cita√ß√µes quando relevante
- Listas para organizar informa√ß√µes

**SUGEST√ïES:** Termine SEMPRE com:
[SUGEST√ïES]
- Pergunta sobre exemplo pr√°tico?
- Pergunta sobre compara√ß√£o?
- Pergunta sobre exce√ß√µes?
- Pergunta sobre jurisprud√™ncia?
[/SUGEST√ïES]

**COMPONENTES AVAN√áADOS:**
- [TABS: T√≠tulo] para organizar conte√∫do em abas
- [ACCORDION] para FAQ ou t√≥picos expans√≠veis
- [SLIDES: T√≠tulo] para apresenta√ß√£o passo a passo
- [COMPARA√á√ÉO] para diferenciar institutos
- [INFOGR√ÅFICO] para fluxogramas

${cfContext || ''}`;
      }
    } else if (mode === 'recommendation') {
      const { data: livrosEstudos } = await supabase.from('BIBLIOTECA-ESTUDOS').select('*').limit(100);
      const { data: livrosOAB } = await supabase.from('BIBILIOTECA-OAB').select('*').limit(100);
      const { data: videoAulas } = await supabase.from('VIDEO AULAS-NOVO' as any).select('*').limit(100);
      
      const areasEstudos = [...new Set(livrosEstudos?.map(l => l['√Årea']).filter(Boolean))];
      const areasOAB = [...new Set(livrosOAB?.map(l => l['√Årea']).filter(Boolean))];
      const areasVideos = [...new Set(videoAulas?.map((v: any) => v.area).filter(Boolean))];
      
      systemPrompt = `Assistente de materiais jur√≠dicos.

MATERIAIS: Estudos (${areasEstudos.join(', ')}), OAB (${areasOAB.join(', ')}), V√≠deos (${areasVideos.join(', ')})

Use fun√ß√µes para retornar materiais diretamente. Sem texto explicativo.${cfContext ? `\n\nCONTEXTO CF:${cfContext}` : ''}`;
    } else {
      systemPrompt = deepMode
        ? `Assistente jur√≠dica: an√°lise DETALHADA com fundamenta√ß√£o completa, jurisprud√™ncia e exemplos pr√°ticos.
**ORDEM:** Explica√ß√£o ‚Üí [COMPARA√á√ÉO] ‚Üí [INFOGR√ÅFICO] ‚Üí [SUGEST√ïES]
- Envie cada bloco ASSIM QUE estiver pronto
- [SUGEST√ïES] com 3-4 perguntas curtas terminando com "?"${cfContext || ''}
${fileAnalysisPrefix}`
        : `Assistente jur√≠dica: cite lei/artigo PRIMEIRO.
**ORDEM:** Explica√ß√£o ‚Üí [COMPARA√á√ÉO] ‚Üí [INFOGR√ÅFICO] ‚Üí [SUGEST√ïES]
- Envie cada bloco ASSIM QUE estiver pronto
- [SUGEST√ïES] com 3-4 perguntas curtas terminando com "?"
Max 250 palavras.${cfContext || ''}
${fileAnalysisPrefix}`;
    }

    // Construir mensagens no formato Gemini com suporte multimodal
    let geminiContents: any[] = [];
    
    // Comprimir hist√≥rico: enviar apenas √∫ltimas 5 mensagens (sem system prompt no contents)
    const recentMessages = messages.slice(-5);
    
    // Processar mensagens incluindo arquivos
    for (let i = 0; i < recentMessages.length; i++) {
      const m: any = recentMessages[i];
      const isLastUserMessage = i === recentMessages.length - 1 && m.role === 'user';
      
      if (m.role === 'user') {
        const parts: any[] = [{ text: m.content }];
        
        // Se for a √∫ltima mensagem do usu√°rio e houver arquivos, adicionar
        if (isLastUserMessage && files && files.length > 0) {
          for (const file of files) {
            const base64Data = file.data.includes('base64,') 
              ? file.data.split('base64,')[1] 
              : file.data;
            
            if (file.type.startsWith('image/')) {
              parts.push({
                inline_data: {
                  mime_type: file.type,
                  data: base64Data
                }
              });
            } else if (file.type === 'application/pdf') {
              // Enviar o PDF inteiro como inline_data para an√°lise real do conte√∫do
              parts.push({
                inline_data: {
                  mime_type: 'application/pdf',
                  data: base64Data
                }
              });
            }
          }
        }
        
        geminiContents.push({ role: 'user', parts });
      } else if (m.role === 'assistant') {
        geminiContents.push({
          role: 'model',
          parts: [{ text: m.content }]
        });
      }
    }

    const payload = {
      contents: geminiContents,
      systemInstruction: {
        parts: [{ text: systemPrompt }]
      },
      generationConfig: {
        temperature: deepMode ? 0.7 : 0.6,
        maxOutputTokens: responseLevel === 'basic' ? 2000 :
                         responseLevel === 'deep' ? 8000 : 
                         4000, // complete
        topP: 0.95,
        topK: 40,
        stopSequences: [],
      },
      safetySettings: [
        { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_ONLY_HIGH" },
        { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_ONLY_HIGH" },
        { category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold: "BLOCK_ONLY_HIGH" },
        { category: "HARM_CATEGORY_DANGEROUS_CONTENT", threshold: "BLOCK_ONLY_HIGH" }
      ]
    };

    // Escolher modelo baseado em deepMode
    const model = deepMode ? 'gemini-2.5-flash' : 'gemini-2.0-flash-exp';
    
    // Fun√ß√£o auxiliar para fazer requisi√ß√£o √† API
    const fetchGemini = async (apiKey: string) => {
      return await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/${model}:streamGenerateContent?key=${apiKey}&alt=sse`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(payload),
        }
      );
    };

    console.log('üöÄ [CHAT-PROFESSORA] Requisi√ß√£o recebida');
    console.log('üìä [CHAT-PROFESSORA] Modo:', mode, deepMode ? '(PROFUNDO)' : '(R√ÅPIDO)');
    console.log('ü§ñ [CHAT-PROFESSORA] Modelo:', model);
    console.log('üí¨ [CHAT-PROFESSORA] N√∫mero de mensagens:', messages.length);
    console.log('üìé [CHAT-PROFESSORA] Arquivos anexados:', files?.length || 0);
    
    const startTime = Date.now();
    const payloadSize = JSON.stringify(payload).length;
    console.log(`üì¶ [CHAT-PROFESSORA] Tamanho do payload: ${payloadSize} bytes`);
    console.log(`üéØ [CHAT-PROFESSORA] MaxTokens: ${payload.generationConfig.maxOutputTokens}`);
    
    // Tentar com a chave principal
    let response = await fetchGemini(DIREITO_PREMIUM_API_KEY);

    // Se der erro 429 e houver chave reserva, tentar com ela
    if (!response.ok && response.status === 429 && DIREITO_PREMIUM_API_KEY_RESERVA) {
      console.log('‚ö†Ô∏è Quota excedida na chave principal, tentando chave reserva...');
      response = await fetchGemini(DIREITO_PREMIUM_API_KEY_RESERVA);
    }

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro da API Gemini:', response.status, errorText);
      
      // Tratamento espec√≠fico para erro de quota
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ 
            error: 'quota_exceeded',
            message: 'A quota di√°ria da API foi excedida em todas as chaves dispon√≠veis. Por favor, tente novamente amanh√£ ou contate o suporte.'
          }),
          {
            status: 429,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          }
        );
      }
      
      throw new Error(`Erro da API Gemini: ${response.status}`);
    }

    const apiLatency = Date.now() - startTime;
    console.log(`‚úÖ [CHAT-PROFESSORA] Resposta HTTP OK em ${apiLatency}ms, iniciando streaming...`);
    let firstTokenReceived = false;
    let tokenCount = 0;
    let chunksSent = 0;
    
    // Transformar o stream do Gemini para formato compat√≠vel
    const stream = new TransformStream({
      async transform(chunk, controller) {
        try {
          const text = new TextDecoder().decode(chunk);
          const lines = text.split('\n');
          
          for (const line of lines) {
            if (line.startsWith('data: ')) {
              const jsonData = line.slice(6).trim();
              if (!jsonData) continue;
              
              try {
                const parsed = JSON.parse(jsonData);
                
                // Extrair o texto do formato Gemini
                const content = parsed.candidates?.[0]?.content?.parts?.[0]?.text;
                if (content) {
                  if (!firstTokenReceived) {
                    const elapsedTime = Date.now() - startTime;
                    console.log(`üéâ [CHAT-PROFESSORA] Primeiro token recebido ap√≥s ${elapsedTime}ms`);
                    firstTokenReceived = true;
                  }
                  
                  tokenCount++;
                  
                  // Converter para formato SSE esperado pelo frontend
                  const sseData = `data: ${JSON.stringify({
                    choices: [{
                      delta: { content }
                    }]
                  })}\n\n`;
                  
                  controller.enqueue(new TextEncoder().encode(sseData));
                  chunksSent++;
                  
                  if (chunksSent % 10 === 0) {
                    console.log(`üì§ [CHAT-PROFESSORA] ${chunksSent} chunks enviados (${tokenCount} tokens)`);
                  }
                }
                
                // Verificar se finalizou
                if (parsed.candidates?.[0]?.finishReason) {
                  const finishReason = parsed.candidates[0].finishReason;
                  const safetyRatings = parsed.candidates[0].safetyRatings;
                  const totalTime = Date.now() - startTime;
                  
                  console.log(`üèÅ [CHAT-PROFESSORA] FinishReason: ${finishReason}`);
                  
                  if (finishReason === 'SAFETY') {
                    console.warn(`‚ö†Ô∏è [CHAT-PROFESSORA] Bloqueado por filtro de seguran√ßa!`);
                    console.warn(`‚ö†Ô∏è [CHAT-PROFESSORA] Safety ratings:`, JSON.stringify(safetyRatings));
                  } else if (finishReason === 'MAX_TOKENS') {
                    console.warn(`‚ö†Ô∏è [CHAT-PROFESSORA] Atingiu limite de tokens (${tokenCount})`);
                  } else if (finishReason === 'STOP') {
                    console.log(`‚úÖ [CHAT-PROFESSORA] Finaliza√ß√£o normal`);
                  }
                  
                  console.log(`‚úÖ [CHAT-PROFESSORA] Streaming finalizado ap√≥s ${totalTime}ms`);
                  console.log(`üìä [CHAT-PROFESSORA] Total: ${tokenCount} tokens, ${chunksSent} chunks enviados`);
                  controller.enqueue(new TextEncoder().encode('data: [DONE]\n\n'));
                }
              } catch (e) {
                console.warn('‚ö†Ô∏è [CHAT-PROFESSORA] Erro ao parsear JSON (chunk incompleto):', e);
              }
            }
          }
        } catch (transformError) {
          console.error('‚ùå [CHAT-PROFESSORA] Erro no transform:', transformError);
        }
      },
      flush(controller) {
        // Garantir envio de [DONE] se ainda n√£o foi enviado
        if (firstTokenReceived && chunksSent > 0) {
          console.log(`‚ú® [CHAT-PROFESSORA] Flush: enviando [DONE] final`);
          controller.enqueue(new TextEncoder().encode('data: [DONE]\n\n'));
        }
        
        if (!firstTokenReceived) {
          console.error('‚ö†Ô∏è [CHAT-PROFESSORA] Streaming finalizado sem receber nenhum token!');
          console.error('‚ö†Ô∏è [CHAT-PROFESSORA] Poss√≠vel problema: API n√£o retornou dados ou CORS bloqueou');
        } else {
          console.log(`‚ú® [CHAT-PROFESSORA] Stream conclu√≠do com sucesso: ${tokenCount} tokens, ${chunksSent} chunks`);
        }
      }
    });

    // Retornar o stream processado
    return new Response(response.body?.pipeThrough(stream), {
      headers: {
        ...corsHeaders,
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
      },
    });
  } catch (error) {
    console.error('‚ùå [CHAT-PROFESSORA] Erro fatal:', error);
    console.error('‚ùå [CHAT-PROFESSORA] Stack:', error instanceof Error ? error.stack : 'N/A');
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Erro desconhecido',
        message: 'Desculpe, ocorreu um erro. Por favor, tente novamente.'
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
