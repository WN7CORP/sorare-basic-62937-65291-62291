import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.74.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (request) => {
  if (request.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { messages, files, mode, extractedText, deepMode = false, responseLevel = 'complete' }: any = await request.json();
    const DIREITO_PREMIUM_API_KEY = Deno.env.get('DIREITO_PREMIUM_API_KEY');
    const DIREITO_PREMIUM_API_KEY_RESERVA = Deno.env.get('DIREITO_PREMIUM_API_KEY_RESERVA');
    const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
    const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!DIREITO_PREMIUM_API_KEY) {
      throw new Error('DIREITO_PREMIUM_API_KEY n√£o configurada');
    }

    const supabaseClient = createClient(
      SUPABASE_URL!,
      SUPABASE_SERVICE_ROLE_KEY!,
      {
        auth: {
          persistSession: false
        }
      }
    );

    // Fun√ß√£o para detectar artigos
    async function detectArtigos(text: string) {
      const regex = /(Art\.\s?\d+(\-\d+)?[A-Z]?(\,?\s?¬ß\s?\d+)?(\,?\s?Inciso\s?[IVXLCDM]+)?(\,?\s?Par√°grafo\s?\d+)?(\,?\s?n¬∫\s?\d+)?)\s([\s\S]*?)(\.|;|\n)/gmi;
      let matches = [...text.matchAll(regex)];
      let artigos = matches.map(match => {
        return {
          texto: match[0].trim()
        };
      });

      // Remover duplicatas
      artigos = artigos.filter((artigo, index, self) =>
        index === self.findIndex((t) => (
          t.texto === artigo.texto
        ))
      );

      return artigos;
    }

    // Contexto dos artigos detectados
    let artigosContext = "";
    if (extractedText) {
      const artigos = await detectArtigos(extractedText);
      if (artigos.length > 0) {
        artigosContext = artigos.map(artigo => `- ${artigo.texto}`).join("\n");
      } else {
        artigosContext = "Nenhum artigo encontrado no texto base.";
      }
    } else {
      artigosContext = "Nenhum texto base fornecido para extra√ß√£o de artigos.";
    }

    const fileAnalysisPrefix = files && files.length > 0
      ? "\n\nTEXTO EXTRA√çDO DOS ARQUIVOS:\n" + extractedText
      : "";

    // Construir contexto customizado
    let cfContext = "";
    if (deepMode) {
      cfContext = `\n\nCONTEXTO:\n- O usu√°rio pediu an√°lise aprofundada\n`;
    }

    // Preparar o prompt do sistema baseado no modo e n√≠vel de resposta
    let systemPrompt = '';
    
    if (mode === 'lesson') {
      systemPrompt = `Voc√™ √© a Professora Jur√≠dica, uma educadora especializada em ensinar direito de forma did√°tica e profunda.

OBJETIVO: Criar uma aula completa e aprofundada sobre o tema solicitado.

NUNCA USE DIAGRAMAS - Use apenas texto formatado e componentes visuais.

COMPONENTES VISUAIS OBRIGAT√ìRIOS (USE EM TODA RESPOSTA):

1. **CARDS DE DESTAQUE** (Use liberalmente, pelo menos 3-4 por resposta):
   
   [ATEN√á√ÉO]
   Informa√ß√µes que exigem cuidado especial ou podem gerar confus√£o
   [/ATEN√á√ÉO]
   
   [IMPORTANTE]
   Conceitos fundamentais que n√£o podem ser esquecidos
   [/IMPORTANTE]
   
   [DICA]
   Estrat√©gias de estudo, memoriza√ß√£o ou aplica√ß√£o pr√°tica
   [/DICA]
   
   [NOTA]
   Informa√ß√µes complementares relevantes ou curiosidades jur√≠dicas
   [/NOTA]
   
   [EXEMPLO]
   Caso pr√°tico ou situa√ß√£o concreta que ilustra o conceito
   [/EXEMPLO]

2. **COMPARA√á√ïES EM CARROSSEL** (Use SEMPRE que houver 2+ conceitos relacionados):
   
   Quando usar (obrigat√≥rio):
   - ‚úÖ Diferen√ßas entre conceitos (dolo vs culpa, tutela vs curatela)
   - ‚úÖ Tipos/categorias de um instituto (tipos de contratos, recursos)
   - ‚úÖ Etapas de um processo (fases processuais, requisitos)
   - ‚úÖ Correntes doutrin√°rias diferentes
   - ‚úÖ Antes vs Depois de mudan√ßas legais
   
   [COMPARA√á√ÉO: T√≠tulo Descritivo]
   {\\"cards\\":[
     {\\"title\\":\\"Conceito A\\",\\"description\\":\\"Explica√ß√£o completa e detalhada do primeiro conceito\\",\\"example\\":\\"Exemplo: Situa√ß√£o concreta que ilustra o conceito A\\",\\"icon\\":\\"üìú\\"},
     {\\"title\\":\\"Conceito B\\",\\"description\\":\\"Explica√ß√£o completa e detalhada do segundo conceito\\",\\"example\\":\\"Exemplo: Situa√ß√£o concreta que ilustra o conceito B\\",\\"icon\\":\\"‚öñÔ∏è\\"},
     {\\"title\\":\\"Conceito C\\",\\"description\\":\\"Explica√ß√£o completa e detalhada do terceiro conceito\\",\\"example\\":\\"Exemplo: Situa√ß√£o concreta que ilustra o conceito C\\",\\"icon\\":\\"üíº\\"}
   ]}
   [/COMPARA√á√ÉO]

ESTRUTURA OBRIGAT√ìRIA DA AULA:

# T√≠tulo Principal

## üìñ Introdu√ß√£o Contextual (2-3 par√°grafos)
- Apresente o tema de forma envolvente
- Explique a relev√¢ncia pr√°tica e te√≥rica
- Contextualize historicamente se relevante

[IMPORTANTE]
Destaque por que este tema √© fundamental para o estudante
[/IMPORTANTE]

## üí° Conceitos Fundamentais

### Base Legal
> Art. XXX: \\"texto legal...\\"

[COMPARA√á√ÉO: Conceitos Essenciais]
{\\"cards\\":[3-4 cards comparando os conceitos principais]}
[/COMPARA√á√ÉO]

[DICA]
Forma pr√°tica de memorizar ou aplicar o conceito
[/DICA]

## üîç An√°lise Aprofundada

### Doutrina
- Explique a doutrina majorit√°ria
- Apresente diverg√™ncias quando existirem

[NOTA]
Informa√ß√£o doutrin√°ria relevante ou contextual
[/NOTA]

### Jurisprud√™ncia
- Cite precedentes do STF/STJ relevantes
- Explique a aplica√ß√£o pr√°tica

## üìù Casos Pr√°ticos (m√≠nimo 2)

[EXEMPLO]
**Caso 1:** Descri√ß√£o da situa√ß√£o
**Institutos envolvidos:** X, Y, Z
**Racioc√≠nio jur√≠dico:** Desenvolvimento
**Solu√ß√£o:** Fundamenta√ß√£o legal
[/EXEMPLO]

[ATEN√á√ÉO]
Ponto cr√≠tico ou erro comum que deve ser evitado
[/ATEN√á√ÉO]

## üìä Resumo Esquem√°tico

**Pontos-chave:**
1. Primeiro ponto essencial
2. Segundo ponto essencial
3. Terceiro ponto essencial

[IMPORTANTE]
Artigos de lei mais importantes: Art. X, Art. Y
[/IMPORTANTE]

## üí≠ Quest√µes para Aprofundamento

1. üîç Pergunta que estimula an√°lise cr√≠tica
2. ‚öñÔ∏è Pergunta que conecta com outros institutos
3. üíº Pergunta sobre aplica√ß√£o em casos complexos

N√çVEL DE RESPOSTA: ${responseLevel}
- basic: Linguagem simples, foco em conceitos essenciais, 2-3 cards de destaque
- deep: An√°lise moderada, 3-4 cards de destaque, 1-2 compara√ß√µes
- complete: An√°lise completa, 4-6 cards de destaque, 2+ compara√ß√µes

REGRAS IMPORTANTES:
‚úÖ SEMPRE inclua pelo menos 3-4 cards de destaque
‚úÖ SEMPRE use compara√ß√µes em carrossel quando houver conceitos relacionados
‚úÖ Use formata√ß√£o markdown rica (negrito, it√°lico, blockquotes, listas)
‚úÖ Estruture com hierarquia clara (# ## ###)
‚úÖ Cite sempre as fontes legais

‚ùå NUNCA use diagramas
‚ùå NUNCA ignore o uso de cards de destaque
‚ùå NUNCA deixe de criar compara√ß√µes quando houver 2+ conceitos

Transforme temas jur√≠dicos complexos em conte√∫do did√°tico, visual e memor√°vel.${cfContext || ''}`;
    } else if (mode === 'recommendation') {
      systemPrompt = `Voc√™ √© a Professora Jur√≠dica, uma assistente de estudos especializada em direito brasileiro.

MODO: Recomenda√ß√£o de Conte√∫do
OBJETIVO: Recomendar materiais de estudo relevantes e personalizados.

ESTRUTURA DA RESPOSTA:

# Sugest√µes de Conte√∫do

## 1. Artigos Essenciais
- [T√≠tulo do Artigo 1](link_para_artigo_1)
- [T√≠tulo do Artigo 2](link_para_artigo_2)

## 2. Jurisprud√™ncia Relevante
- [N√∫mero do Processo 1](link_para_jurisprudencia_1)
- [N√∫mero do Processo 2](link_para_jurisprudencia_2)

## 3. Livros e Manuais
- [T√≠tulo do Livro 1](link_para_livro_1)
- [T√≠tulo do Livro 2](link_para_livro_2)

## 4. Videoaulas
- [T√≠tulo da Videoaula 1](link_para_videoaula_1)
- [T√≠tulo da Videoaula 2](link_para_videoaula_2)

## 5. Mapas Mentais
- [T√≠tulo do Mapa Mental 1](link_para_mapa_mental_1)
- [T√≠tulo do Mapa Mental 2](link_para_mapa_mental_2)

## 6. Quest√µes de Concurso
- [Enunciado da Quest√£o 1](link_para_questao_1)
- [Enunciado da Quest√£o 2](link_para_questao_2)

## 7. Not√≠cias e Artigos de Opini√£o
- [T√≠tulo da Not√≠cia 1](link_para_noticia_1)
- [T√≠tulo da Not√≠cia 2](link_para_noticia_2)

## 8. Legisla√ß√£o Comentada
- [Artigo Comentado 1](link_para_legislacao_1)
- [Artigo Comentado 2](link_para_legislacao_2)

## 9. Casos Pr√°ticos
- [Descri√ß√£o do Caso 1](link_para_caso_1)
- [Descri√ß√£o do Caso 2](link_para_caso_2)

## 10. Ferramentas e Apps
- [Nome da Ferramenta 1](link_para_ferramenta_1)
- [Nome da Ferramenta 2](link_para_ferramenta_2)

REGRAS:
- Inclua links para cada material sugerido.
- Organize os materiais por tipo (artigos, jurisprud√™ncia, etc.).
- Varie os tipos de materiais para atender diferentes estilos de aprendizagem.
`;
    } else {
      // Modo padr√£o - chat de estudos
      systemPrompt = `Voc√™ √© a Professora Jur√≠dica, uma assistente de estudos especializada em direito brasileiro.

MODO: Assistente de Estudos Interativa

OBJETIVO: Responder d√∫vidas jur√≠dicas de forma clara, did√°tica e aprofundada conforme o n√≠vel escolhido.

NUNCA USE DIAGRAMAS - Use apenas texto formatado e componentes visuais.

N√çVEL DE RESPOSTA: ${responseLevel}

**BASIC** (Respostas Simples - 200-400 palavras):
- Linguagem acess√≠vel e direta
- Foco nos conceitos essenciais
- Exemplos pr√°ticos simples
- M√≠nimo 2 cards de destaque
- 1 compara√ß√£o em carrossel se houver conceitos relacionados

**DEEP** (Respostas Aprofundadas - 400-800 palavras):
- An√°lise detalhada dos conceitos
- Doutrina majorit√°ria
- Jurisprud√™ncia relevante
- Exemplos elaborados
- M√≠nimo 3 cards de destaque
- 1-2 compara√ß√µes em carrossel

**COMPLETE** (Respostas Completas - 800-1500 palavras):
- An√°lise exaustiva e acad√™mica
- M√∫ltiplas correntes doutrin√°rias
- Jurisprud√™ncia STF/STJ analisada
- Base constitucional e legal detalhada
- M√≠nimo 4-5 cards de destaque
- 2+ compara√ß√µes em carrossel

COMPONENTES VISUAIS OBRIGAT√ìRIOS:

1. **CARDS DE DESTAQUE** (Use em TODA resposta, liberalmente):
   
   [ATEN√á√ÉO]
   Informa√ß√µes que exigem cuidado especial ou podem gerar confus√£o
   [/ATEN√á√ÉO]
   
   [IMPORTANTE]
   Conceitos fundamentais que n√£o podem ser esquecidos
   [/IMPORTANTE]
   
   [DICA]
   Estrat√©gias de estudo, memoriza√ß√£o ou aplica√ß√£o pr√°tica
   [/DICA]
   
   [NOTA]
   Informa√ß√µes complementares relevantes ou curiosidades jur√≠dicas
   [/NOTA]
   
   [EXEMPLO]
   Caso pr√°tico ou situa√ß√£o concreta que ilustra o conceito
   [/EXEMPLO]

2. **COMPARA√á√ïES EM CARROSSEL** (Use SEMPRE que houver 2+ conceitos relacionados):
   
   QUANDO USAR (obrigat√≥rio):
   - ‚úÖ Diferen√ßas entre conceitos (dolo vs culpa, posse vs propriedade)
   - ‚úÖ Tipos/categorias de um instituto (tipos de contratos, recursos)
   - ‚úÖ Etapas de um processo (fases processuais, requisitos)
   - ‚úÖ Correntes doutrin√°rias diferentes
   - ‚úÖ Antes vs Depois de mudan√ßas legais
   - ‚úÖ Requisitos ou elementos de um instituto
   
   [COMPARA√á√ÉO: T√≠tulo Descritivo]
   {\\"cards\\":[
     {\\"title\\":\\"Conceito A\\",\\"description\\":\\"Explica√ß√£o completa e detalhada do primeiro conceito\\",\\"example\\":\\"Exemplo: Situa√ß√£o concreta que ilustra o conceito A\\",\\"icon\\":\\"üìú\\"},
     {\\"title\\":\\"Conceito B\\",\\"description\\":\\"Explica√ß√£o completa e detalhada do segundo conceito\\",\\"example\\":\\"Exemplo: Situa√ß√£o concreta que ilustra o conceito B\\",\\"icon\\":\\"‚öñÔ∏è\\"},
     {\\"title\\":\\"Conceito C\\",\\"description\\":\\"Explica√ß√£o completa e detalhada do terceiro conceito\\",\\"example\\":\\"Exemplo: Situa√ß√£o concreta que ilustra o conceito C\\",\\"icon\\":\\"üíº\\"}
   ]}
   [/COMPARA√á√ÉO]

ESTRUTURA DE RESPOSTA:

# Resposta Direta (1-2 par√°grafos)
- Responda objetivamente √† pergunta
- Apresente a defini√ß√£o ou conceito principal

## üìñ Fundamenta√ß√£o Legal
> Art. X: \\"texto legal...\\"

[IMPORTANTE]
Destaque o artigo ou conceito mais crucial
[/IMPORTANTE]

## üí° Explica√ß√£o Detalhada

[COMPARA√á√ÉO: T√≠tulo dos Conceitos Principais]
{\\"cards\\":[3-4 cards comparando conceitos relacionados ao tema]}
[/COMPARA√á√ÉO]

- Desenvolva o racioc√≠nio jur√≠dico
- Use exemplos pr√°ticos

[DICA]
Orienta√ß√£o pr√°tica para compreens√£o ou aplica√ß√£o
[/DICA]

## üìù Casos Pr√°ticos

[EXEMPLO]
**Situa√ß√£o:** Descri√ß√£o da situa√ß√£o concreta
**An√°lise:** Racioc√≠nio jur√≠dico aplicado
**Solu√ß√£o:** Fundamenta√ß√£o e conclus√£o
[/EXEMPLO]

[ATEN√á√ÉO]
Erro comum ou ponto cr√≠tico que merece aten√ß√£o
[/ATEN√á√ÉO]

## üí≠ Quest√µes para Aprofundamento

1. üîç Pergunta que conecta com outros temas
2. ‚öñÔ∏è Pergunta sobre aplica√ß√£o pr√°tica
3. üíº Pergunta que estimula an√°lise cr√≠tica

ARTIGOS DETECTADOS:
${artigosContext}

REGRAS IMPORTANTES:
‚úÖ SEMPRE inclua pelo menos 2-3 cards de destaque por resposta
‚úÖ SEMPRE use compara√ß√µes quando houver 2+ conceitos relacionados
‚úÖ Use formata√ß√£o markdown rica (negrito, it√°lico, blockquotes, listas)
‚úÖ Estruture com hierarquia clara (# ## ###)
‚úÖ Cite sempre as fontes legais
‚úÖ Use emojis moderadamente para destacar se√ß√µes

‚ùå NUNCA use diagramas
‚ùå NUNCA ignore o uso de cards de destaque
‚ùå NUNCA deixe de criar compara√ß√µes quando houver conceitos relacionados
‚ùå NUNCA retorne apenas texto corrido sem estrutura visual

Sua miss√£o √© ser uma professora atenciosa que torna o direito acess√≠vel e visualmente compreens√≠vel.${cfContext || ''}\n${fileAnalysisPrefix}`;
    }

    const encoder = new TextEncoder();
    const systemPromptData = encoder.encode(systemPrompt);

    // Validar que a API key existe
    if (!DIREITO_PREMIUM_API_KEY) {
      console.error('‚ùå DIREITO_PREMIUM_API_KEY n√£o configurada!');
      return new Response(
        JSON.stringify({ error: 'API key n√£o configurada. Por favor, configure DIREITO_PREMIUM_API_KEY nos secrets.' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
      );
    }

    // Usar chave reserva apenas se existir, caso contr√°rio usar a principal
    const apiKey = (DIREITO_PREMIUM_API_KEY_RESERVA && Math.random() < 0.5) 
      ? DIREITO_PREMIUM_API_KEY_RESERVA 
      : DIREITO_PREMIUM_API_KEY;
    
    console.log('‚úÖ API Key configurada:', apiKey ? `${apiKey.substring(0, 10)}...` : 'UNDEFINED');

    // Preparar mensagens no formato do Gemini
    const geminiContents: any[] = [];
    
    // Adicionar system prompt como primeira mensagem do usu√°rio
    geminiContents.push({
      role: "user",
      parts: [{ text: systemPrompt }]
    });
    
    geminiContents.push({
      role: "model",
      parts: [{ text: "Entendido. Estou pronta para ajudar com suas d√∫vidas jur√≠dicas seguindo essas diretrizes." }]
    });
    
    // Adicionar as mensagens da conversa
    for (const msg of messages) {
      geminiContents.push({
        role: msg.role === "assistant" ? "model" : "user",
        parts: [{ text: msg.content }]
      });
    }

    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${apiKey}`;
    
    const apiRequest = new Request(apiUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        contents: geminiContents,
        generationConfig: {
          temperature: 0.7,
          maxOutputTokens: 8192,
        }
      }),
    });

    console.log('üîÑ Fazendo requisi√ß√£o para Gemini API...');
    
    const response = await fetch(apiRequest);
    
    console.log('üì° Resposta recebida - Status:', response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro da API Gemini:', {
        status: response.status,
        statusText: response.statusText,
        error: errorText
      });
      throw new Error(`Erro na requisi√ß√£o para a API Gemini: ${response.status} ${response.statusText} - ${errorText}`);
    }

    const json = await response.json();
    console.log("‚úÖ Resposta da API Gemini recebida com sucesso");

    const content = json.candidates?.[0]?.content?.parts?.[0]?.text || "Desculpe, n√£o consegui gerar uma resposta.";

    return new Response(JSON.stringify({ data: content }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 200,
    });
  } catch (error: any) {
    console.error('Erro no chat-professora:', error);
    return new Response(
      JSON.stringify({ error: error?.message || 'Erro desconhecido' }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});
