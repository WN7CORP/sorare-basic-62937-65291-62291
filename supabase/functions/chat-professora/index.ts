import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.74.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { messages, files, mode, extractedText } = await req.json();
    const DIREITO_PREMIUM_API_KEY = Deno.env.get('DIREITO_PREMIUM_API_KEY');
    const DIREITO_PREMIUM_API_KEY_RESERVA = Deno.env.get('DIREITO_PREMIUM_API_KEY_RESERVA');
    const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
    const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!DIREITO_PREMIUM_API_KEY) {
      throw new Error('DIREITO_PREMIUM_API_KEY n√£o configurada');
    }

    // Criar cliente Supabase para buscar dados da CF
    const supabase = createClient(SUPABASE_URL!, SUPABASE_SERVICE_ROLE_KEY!);

    // Detectar men√ß√µes a artigos da CF
    const lastUserMessage = messages[messages.length - 1];
    let cfContext = '';
    const hasFiles = files && files.length > 0;
    
    // Se h√° arquivos anexados, adicionar instru√ß√£o especial de an√°lise
    let fileAnalysisPrefix = '';
    if (hasFiles) {
      fileAnalysisPrefix = `\n\n**IMPORTANTE - ARQUIVO ANEXADO:**
Voc√™ recebeu um arquivo real (imagem ou PDF). Voc√™ DEVE analisar o CONTE√öDO REAL do arquivo.

${extractedText ? `**TEXTO EXTRA√çDO DO PDF:**\n${extractedText}\n\n` : ''}

Sua resposta DEVE:
1. Descrever EXATAMENTE o que voc√™ v√™/l√™ no arquivo (n√£o invente nada)
2. Extrair textos vis√≠veis se for imagem
3. Resumir os pontos principais encontrados NO ARQUIVO
4. Perguntar √† pessoa o que ela gostaria de fazer com esse conte√∫do
5. Nas sugest√µes [SUGEST√ïES], oferecer perguntas espec√≠ficas baseadas no CONTE√öDO REAL analisado

**NUNCA invente conte√∫do que n√£o est√° no arquivo!**\n`;
    }
    
    // Regex para detectar artigos (art. 5¬∫, artigo 5, art 5, etc)
    const articleRegex = /art(?:igo)?\.?\s*(\d+)/gi;
    const articleMatches = lastUserMessage?.content?.match(articleRegex);
    
    if (articleMatches) {
      console.log('Artigos detectados:', articleMatches);
      
      // Buscar cada artigo mencionado
      for (const match of articleMatches) {
        const articleNum = match.replace(/art(?:igo)?\.?\s*/gi, '').trim();
        
        const { data: articles } = await supabase
          .from('CF - Constitui√ß√£o Federal')
          .select('*')
          .ilike('N√∫mero do Artigo', `%${articleNum}%`)
          .limit(1);
        
        if (articles && articles.length > 0) {
          const article = articles[0];
          cfContext += `\n\n[ARTIGO ${article['N√∫mero do Artigo']} DA CF]\n`;
          cfContext += `${article.Artigo}\n`;
          if (article.Narra√ß√£o) cfContext += `Narra√ß√£o: ${article.Narra√ß√£o}\n`;
          if (article.Comentario) cfContext += `Coment√°rio: ${article.Comentario}\n`;
        }
      }
    }

    // Preparar o prompt do sistema baseado no modo
    let systemPrompt = '';
    
    if (mode === 'lesson') {
      systemPrompt = `Voc√™ √© uma professora de direito experiente e did√°tica.

MISS√ÉO: Criar conte√∫do detalhado e educativo sobre temas jur√≠dicos.

ESTRUTURA DA AULA:
# üéØ Objetivos (3-5 pontos claros)
# üìñ Introdu√ß√£o (contexto e import√¢ncia)
# üìö Conte√∫do (conceitos, base legal, aplica√ß√£o pr√°tica)
# üí° Exemplos Pr√°ticos (3-5 situa√ß√µes reais)
# ‚úÖ Resumo (pontos-chave essenciais)
# üéì Exerc√≠cios de Fixa√ß√£o

FORMATA√á√ÉO:
- Cite SEMPRE texto legal/artigos primeiro
- Use tags especiais RARAMENTE: [ATEN√á√ÉO], [IMPORTANTE], [DICA], [NOTA]
- [COMPARA√á√ÉO] apenas para conceitos que precisam compara√ß√£o lado a lado
- Markdown simples e direto
- Explique em linguagem acess√≠vel

${cfContext ? `\n\nCONTEXTO DA CONSTITUI√á√ÉO FEDERAL:${cfContext}` : ''}`;
    } else if (mode === 'recommendation') {
      // Buscar materiais dispon√≠veis nas bibliotecas
      const { data: livrosEstudos } = await supabase
        .from('BIBLIOTECA-ESTUDOS')
        .select('*')
        .limit(100);
      
      const { data: livrosOAB } = await supabase
        .from('BIBILIOTECA-OAB')
        .select('*')
        .limit(100);
      
      const { data: videoAulas } = await supabase
        .from('VIDEO AULAS-NOVO' as any)
        .select('*')
        .limit(100);
      
      // Agrupar √°reas dispon√≠veis
      const areasEstudos = [...new Set(livrosEstudos?.map(l => l['√Årea']).filter(Boolean))];
      const areasOAB = [...new Set(livrosOAB?.map(l => l['√Årea']).filter(Boolean))];
      const areasVideos = [...new Set(videoAulas?.map((v: any) => v.area).filter(Boolean))];
      
      systemPrompt = `Voc√™ √© uma assistente que RETORNA MATERIAIS DE ESTUDO de forma estruturada.

IMPORTANTE: Voc√™ N√ÉO deve gerar texto explicativo. Voc√™ deve RETORNAR os materiais diretamente usando as ferramentas dispon√≠veis.

MATERIAIS DISPON√çVEIS:
üìö **Biblioteca de Estudos** - √Åreas: ${areasEstudos.join(', ')}
üìñ **Biblioteca OAB** - √Åreas: ${areasOAB.join(', ')}
üé• **Videoaulas** - √Åreas: ${areasVideos.join(', ')}

COMO FUNCIONAR:
1. Quando o usu√°rio pedir livros ou v√≠deos sobre um tema, use as fun√ß√µes dispon√≠veis
2. Busque os materiais que melhor correspondem ao pedido
3. Retorne os resultados usando as ferramentas (n√£o gere texto)

NUNCA escreva texto como "Aqui est√£o algumas recomenda√ß√µes...". 
SEMPRE use as fun√ß√µes para retornar os materiais diretamente.

${cfContext ? `\n\nCONTEXTO DA CONSTITUI√á√ÉO FEDERAL:${cfContext}` : ''}`;
    } else {
      systemPrompt = `Voc√™ √© uma assistente jur√≠dica especializada em orientar pessoas sobre direito brasileiro.

OBJETIVO: Ajudar pessoas a entenderem direitos e procedimentos legais de forma pr√°tica.

COMO RESPONDER:
1. Cite texto legal/artigos PRIMEIRO
2. Explique em linguagem clara
3. D√™ passo a passo pr√°tico
4. Use [ATEN√á√ÉO], [IMPORTANTE], [DICA] RARAMENTE (s√≥ se cr√≠tico)
5. [COMPARA√á√ÉO] apenas para comparar conceitos diferentes

FORMATO [COMPARA√á√ÉO]:
[COMPARA√á√ÉO: T√≠tulo]
{
  "cards": [
    {"title": "Op√ß√£o A", "description": "...", "example": "...", "icon": "‚öñÔ∏è"},
    {"title": "Op√ß√£o B", "description": "...", "example": "...", "icon": "üìã"}
  ]
}
[/COMPARA√á√ÉO]

SUGEST√ïES: Ao final, sempre inclua:
[SUGEST√ïES]
Pergunta relevante 1?
Pergunta relevante 2?
Pergunta relevante 3?
[/SUGEST√ïES]

${cfContext ? `\n\nCONTEXTO CF:${cfContext}` : ''}
${fileAnalysisPrefix}`;
    }

    // Construir mensagens no formato Gemini com suporte multimodal
    let geminiContents: any[] = [];
    
    // Adicionar system prompt como primeira mensagem do usu√°rio
    geminiContents.push({
      role: 'user',
      parts: [{ text: systemPrompt }]
    });
    
    // Processar mensagens incluindo arquivos
    for (let i = 0; i < messages.length; i++) {
      const m: any = messages[i];
      const isLastUserMessage = i === messages.length - 1 && m.role === 'user';
      
      if (m.role === 'user') {
        const parts: any[] = [{ text: m.content }];
        
        // Se for a √∫ltima mensagem do usu√°rio e houver arquivos, adicionar
        if (isLastUserMessage && files && files.length > 0) {
          for (const file of files) {
            const base64Data = file.data.includes('base64,') 
              ? file.data.split('base64,')[1] 
              : file.data;
            
            if (file.type.startsWith('image/')) {
              parts.push({
                inline_data: {
                  mime_type: file.type,
                  data: base64Data
                }
              });
            } else if (file.type === 'application/pdf') {
              // Enviar o PDF inteiro como inline_data para an√°lise real do conte√∫do
              parts.push({
                inline_data: {
                  mime_type: 'application/pdf',
                  data: base64Data
                }
              });
            }
          }
        }
        
        geminiContents.push({ role: 'user', parts });
      } else if (m.role === 'assistant') {
        geminiContents.push({
          role: 'model',
          parts: [{ text: m.content }]
        });
      }
    }

    const payload = {
      contents: geminiContents,
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: mode === 'lesson' ? 16000 : 8000,
        topP: 0.95,
        topK: 40,
      },
    };

    // Fun√ß√£o auxiliar para fazer requisi√ß√£o √† API
    const fetchGemini = async (apiKey: string) => {
      return await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:streamGenerateContent?key=${apiKey}&alt=sse`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(payload),
        }
      );
    };

    console.log('üöÄ [CHAT-PROFESSORA] Requisi√ß√£o recebida');
    console.log('üìä [CHAT-PROFESSORA] Modo:', mode);
    console.log('üí¨ [CHAT-PROFESSORA] N√∫mero de mensagens:', messages.length);
    console.log('üìé [CHAT-PROFESSORA] Arquivos anexados:', files?.length || 0);
    
    const startTime = Date.now();
    const payloadSize = JSON.stringify(payload).length;
    console.log(`üì¶ [CHAT-PROFESSORA] Tamanho do payload: ${payloadSize} bytes (${messages.length} mensagens)`);
    console.log('ü§ñ [CHAT-PROFESSORA] Iniciando chamada √† API Gemini 2.5 Flash...');
    
    // Tentar com a chave principal
    let response = await fetchGemini(DIREITO_PREMIUM_API_KEY);

    // Se der erro 429 e houver chave reserva, tentar com ela
    if (!response.ok && response.status === 429 && DIREITO_PREMIUM_API_KEY_RESERVA) {
      console.log('‚ö†Ô∏è Quota excedida na chave principal, tentando chave reserva...');
      response = await fetchGemini(DIREITO_PREMIUM_API_KEY_RESERVA);
    }

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro da API Gemini:', response.status, errorText);
      
      // Tratamento espec√≠fico para erro de quota
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ 
            error: 'quota_exceeded',
            message: 'A quota di√°ria da API foi excedida em todas as chaves dispon√≠veis. Por favor, tente novamente amanh√£ ou contate o suporte.'
          }),
          {
            status: 429,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          }
        );
      }
      
      throw new Error(`Erro da API Gemini: ${response.status}`);
    }

    const apiLatency = Date.now() - startTime;
    console.log(`‚úÖ [CHAT-PROFESSORA] Resposta HTTP OK em ${apiLatency}ms, iniciando streaming...`);
    let firstTokenReceived = false;
    let tokenCount = 0;
    let chunksSent = 0;
    
    // Transformar o stream do Gemini para formato compat√≠vel
    const stream = new TransformStream({
      async transform(chunk, controller) {
        try {
          const text = new TextDecoder().decode(chunk);
          const lines = text.split('\n');
          
          for (const line of lines) {
            if (line.startsWith('data: ')) {
              const jsonData = line.slice(6).trim();
              if (!jsonData) continue;
              
              try {
                const parsed = JSON.parse(jsonData);
                
                // Extrair o texto do formato Gemini
                const content = parsed.candidates?.[0]?.content?.parts?.[0]?.text;
                if (content) {
                  if (!firstTokenReceived) {
                    const elapsedTime = Date.now() - startTime;
                    console.log(`üéâ [CHAT-PROFESSORA] Primeiro token recebido ap√≥s ${elapsedTime}ms`);
                    firstTokenReceived = true;
                  }
                  
                  tokenCount++;
                  
                  // Converter para formato SSE esperado pelo frontend
                  const sseData = `data: ${JSON.stringify({
                    choices: [{
                      delta: { content }
                    }]
                  })}\n\n`;
                  
                  controller.enqueue(new TextEncoder().encode(sseData));
                  chunksSent++;
                  
                  if (chunksSent % 10 === 0) {
                    console.log(`üì§ [CHAT-PROFESSORA] ${chunksSent} chunks enviados (${tokenCount} tokens)`);
                  }
                }
                
                // Verificar se finalizou
                if (parsed.candidates?.[0]?.finishReason) {
                  const totalTime = Date.now() - startTime;
                  console.log(`‚úÖ [CHAT-PROFESSORA] Streaming finalizado ap√≥s ${totalTime}ms`);
                  console.log(`üìä [CHAT-PROFESSORA] Total: ${tokenCount} tokens, ${chunksSent} chunks enviados`);
                  controller.enqueue(new TextEncoder().encode('data: [DONE]\n\n'));
                }
              } catch (e) {
                console.warn('‚ö†Ô∏è [CHAT-PROFESSORA] Erro ao parsear JSON (chunk incompleto):', e);
              }
            }
          }
        } catch (transformError) {
          console.error('‚ùå [CHAT-PROFESSORA] Erro no transform:', transformError);
        }
      },
      flush() {
        if (!firstTokenReceived) {
          console.error('‚ö†Ô∏è [CHAT-PROFESSORA] Streaming finalizado sem receber nenhum token!');
          console.error('‚ö†Ô∏è [CHAT-PROFESSORA] Poss√≠vel problema: API n√£o retornou dados ou CORS bloqueou');
        } else {
          console.log(`‚ú® [CHAT-PROFESSORA] Stream conclu√≠do com sucesso: ${tokenCount} tokens, ${chunksSent} chunks`);
        }
      }
    });

    // Retornar o stream processado
    return new Response(response.body?.pipeThrough(stream), {
      headers: {
        ...corsHeaders,
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
      },
    });
  } catch (error) {
    console.error('‚ùå [CHAT-PROFESSORA] Erro fatal:', error);
    console.error('‚ùå [CHAT-PROFESSORA] Stack:', error instanceof Error ? error.stack : 'N/A');
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Erro desconhecido',
        message: 'Desculpe, ocorreu um erro. Por favor, tente novamente.'
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
