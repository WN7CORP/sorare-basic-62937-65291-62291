import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { tema } = await req.json();
    
    if (!tema) {
      throw new Error('Tema √© obrigat√≥rio');
    }

    const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');
    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY n√£o configurada');
    }

    console.log('Gerando estrutura de aula para:', tema);

    const prompt = `Voc√™ √© um professor jur√≠dico expert. Crie uma estrutura de aula COMPLETA, INTERATIVA e DID√ÅTICA sobre: ${tema}

A aula deve ter EXATAMENTE 3 m√≥dulos, cada um com conte√∫do RICO e EDUCATIVO:

ESTRUTURA DE CADA M√ìDULO:
1. Nome do m√≥dulo (t√≠tulo curto e descritivo)
2. √çcone do m√≥dulo (escolha entre: BookOpen, Scale, Gavel, FileText, Users, Building)

3. CONTE√öDO TE√ìRICO RICO EM MARKDOWN (600-800 palavras):
   - Use ## para t√≠tulos de se√ß√µes
   - Use ### para subt√≠tulos
   - Use **negrito** e *it√°lico* para √™nfase
   - Use listas ordenadas (1., 2.) e n√£o ordenadas (-)
   - OBRIGATORIAMENTE inclua 3-4 CARDS ESPECIAIS no formato:
     > ‚ö†Ô∏è **ATEN√á√ÉO**: Ponto cr√≠tico importante
     > üí° **IMPORTANTE**: Conceito-chave fundamental
     > üìå **DICA PR√ÅTICA**: Aplica√ß√£o no mundo real
     > ‚öñÔ∏è **JURISPRUD√äNCIA**: Caso relevante
   - Organize em se√ß√µes claras com t√≠tulos

4. EXEMPLO PR√ÅTICO DETALHADO:
   - Cen√°rio realista (100-150 palavras)
   - An√°lise jur√≠dica (150-200 palavras)
   - Solu√ß√£o fundamentada (100-150 palavras)
   
5. QUIZ R√ÅPIDO DE FIXA√á√ÉO:
   - 3 quest√µes simples (V/F ou m√∫ltipla escolha)
   - Para refor√ßo imediato do aprendizado
   
6. RESUMO EM T√ìPICOS:
   - 5-7 pontos-chave do m√≥dulo

7. 6 termos-chave para matching (defini√ß√µes m√°x 80 chars)
8. 7 flashcards completos
9. 7 quest√µes de m√∫ltipla escolha com explica√ß√µes

Ao final dos 3 m√≥dulos, crie uma PROVA FINAL com 12 quest√µes desafiadoras.

IMPORTANTE: 
- Retorne APENAS JSON puro, sem markdown, sem \`\`\`json
- O campo "teoria" deve conter markdown rico e formatado
- Os cards especiais (>, ‚ö†Ô∏è, üí°, üìå, ‚öñÔ∏è) s√£o OBRIGAT√ìRIOS
- Exemplo pr√°tico deve ser realista e aplic√°vel

Formato JSON esperado:
{
  "titulo": "T√≠tulo da Aula",
  "descricao": "Breve descri√ß√£o do que ser√° aprendido",
  "area": "${tema.includes('Penal') ? 'Direito Penal' : tema.includes('Civil') ? 'Direito Civil' : tema.includes('Constitucional') ? 'Direito Constitucional' : 'Direito'}",
  "modulos": [
    {
      "id": 1,
      "nome": "Nome do M√≥dulo",
      "icone": "BookOpen",
      "teoria": "## Conceitos Fundamentais\n\nTexto rico em markdown...\n\n> ‚ö†Ô∏è **ATEN√á√ÉO**: Ponto cr√≠tico...\n\n### Aplica√ß√£o Pr√°tica\n\nMais conte√∫do...",
      "exemploPratico": {
        "cenario": "Descri√ß√£o do caso real...",
        "analise": "An√°lise jur√≠dica detalhada...",
        "solucao": "Solu√ß√£o fundamentada..."
      },
      "quizRapido": [
        {
          "question": "Quest√£o simples?",
          "options": ["Verdadeiro", "Falso"],
          "correctAnswer": 0,
          "explicacao": "Breve explica√ß√£o"
        }
      ],
      "resumo": ["Ponto 1", "Ponto 2", "Ponto 3", "Ponto 4", "Ponto 5"],
      "matching": [
        {"termo": "Termo", "definicao": "Defini√ß√£o curta (m√°x 80 chars)"}
      ],
      "flashcards": [
        {"frente": "Pergunta", "verso": "Resposta completa", "exemplo": "Exemplo"}
      ],
      "questoes": [
        {
          "question": "Quest√£o detalhada?",
          "options": ["A", "B", "C", "D"],
          "correctAnswer": 0,
          "explicacao": "Explica√ß√£o detalhada"
        }
      ]
    }
  ],
  "provaFinal": [
    {
      "question": "Quest√£o desafiadora?",
      "options": ["A", "B", "C", "D"],
      "correctAnswer": 0,
      "explicacao": "Explica√ß√£o detalhada",
      "tempoLimite": 45
    }
  ]
}`;

    const response = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LOVABLE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash',
        messages: [
          { role: 'system', content: 'Voc√™ √© um professor jur√≠dico expert que cria aulas estruturadas e did√°ticas. Sempre retorne JSON puro v√°lido.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Erro na API Gemini:', response.status, errorText);
      throw new Error('Erro ao gerar estrutura da aula');
    }

    const data = await response.json();
    let estruturaText = data.choices[0].message.content;
    
    // Limpar markdown se presente
    estruturaText = estruturaText.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
    
    const estrutura = JSON.parse(estruturaText);
    
    console.log('Estrutura gerada com sucesso:', estrutura.titulo);

    return new Response(JSON.stringify(estrutura), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error: any) {
    console.error('Erro em gerar-estrutura-aula:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'Erro ao gerar estrutura da aula' }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
